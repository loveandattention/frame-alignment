本项目借助第三方插件 Flask-Migrate 来实现 ORM 模型迁移，不需要我们手动在数据库中建表。
只需要我们在 models.py 中定义好 ORM 模型后，借助 Flask-Migrate 实现 ORM 模型迁移即可。

要使用 Flask-Migrate，首先需要通过 pip 命令安装
    pip install flask-migrate

1.创建迁移对象（在 app.py 中已经创建好了 migrate 迁移对象）
    migrate = Migrate(app, db)

2.初始化迁移环境
    在创建完迁移对象后，需要初始化迁移环境。方法是在当前项目的根路径下执行如下命令。
    flask db init
    命令执行完成后，会在项目的根路径下生成一个 migrations 文件夹，在这个文件夹下有以下文件或文件夹。
    （1）versions
    （2）alembic.ini
    （3）env.py
    （4）script.py.mako
    到目前为止，初始化迁移环境的工作就已经完成。此工作只需做一次，后续只要不断生成迁移脚本和映射脚本即可，无须重复初始化。

3.生成迁移脚本
    在初始化完迁移环境的前提下，无论是新增了 ORM 模型，或者是 ORM 模型中有任何宇段信息发生改变，并且要将这些改变同步到数据库中，都要做的一件事情就是将当前的修改生成一个迁移脚本，生成迁移脚本的命令如下。
    flask db migrate -m "备注信息"
    以上命令中参数 -m 后面跟的是备注信息，通过添加备注信息，可方便以后查看当前迁移脚本做了哪些事情。当然，备注信息不是必需的，如果不想添加，则把 -m 参数以及后面的内容都删除即可。强烈建议添加备注信息，特别是多人合作开发一个项目时，添加备注信息能让工作更加透明。在执行完以上命令后，可以看到 versions 文件夹中新增了一个 Python 脚本文件，这个脚本文件中记录了此次修改的变更内容。

4.执行迁移脚本
    迁移脚本只是写好了表变更的内容，但是并没有更新数据库。因此还需要执行迁移脚本将这些改变真正映射到数据库中，执行迁移脚本的命令如下。
    f1ask db upgrade
    以上命令会自动从 versions 文件夹中寻找最新的迁移脚本文件，然后执行迁移脚本文件中的 upgrade 函数。在这步工作完成后，模型的修改就能真正映射到数据库中了。
    使用 flask-migrate 做 ORM 模型迁移时，有一点需要注意，被迁移的 ORM 模型必须被 app.py 直接或间接加载。如为了代码更加有序，我们一般会把 ORM 模型放到 models.py 文件中，如果这个 models.py 文件没有被 app.py 直接或问接加载，那么其中的ORM 模型将不能被 flask-migrate 识别到，也就不会参与迁移。
